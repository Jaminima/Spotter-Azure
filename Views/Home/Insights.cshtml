@{
    ViewData["Title"] = "Insights";
    ViewData["Desc"] = "View details around your spotify listen history.";

    authDetails auth = (authDetails)Model;
    if (!await auth.IsValid(spotterdbContext.dbContext))
    {

    }
    else
    {
        <div class="card border-primary">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Track Id</th>
                        <th scope="col">When</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        if (spotterdbContext.dbContext.Spotifies.Any())
                        {
                            int p = int.Parse(auth.spotid);
                            Spotify sp = spotterdbContext.dbContext.Spotifies.First(x => x.SpotId == p);

                            if (sp != null)
                            {
                                foreach (Listen listen in spotterdbContext.dbContext.Listens.Where(x => x.SpotId == p))
                                {
                                    <tr class="table-secondary">
                                        <th scope="row">@listen.TrackId</th>
                                        <td>@listen.ListenAt</td>
                                    </tr>

                                                if (listen.Track.Features != null)
                                                {
                                                    listen.Track.SetFeatures(sp);
                                                    Features features = listen.Track._features;

                                                    float total = Math.Abs(features.getTotal()/100);

                                        <tr>
                                            <th scope="row" colspan="2">
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.acousticness/total))%; background-color: deepskyblue;"></div>
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.danceability/total))%; background-color: firebrick;"></div>
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.energy/total))%; background-color: cadetblue;"></div>
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.speechiness/total))%; background-color: forestgreen;"></div>
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.instrumentalness/total))%; background-color: hotpink;"></div>
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.liveness/total))%; background-color: mediumpurple;"></div>
                                                    <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.valence/total))%; background-color: goldenrod;"></div>
                                                </div>
                                            </th>
                                        </tr>
                                    }
                        }
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    }
}
