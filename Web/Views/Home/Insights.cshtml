@{
    ViewData["Title"] = "Insights";
    ViewData["Desc"] = "View details around your spotify listen history.";

    authDetails auth = (authDetails)Model;
    if (!await auth.IsValid(spotterdbContext.dbContext))
    {

    }
    else
    {
        <div class="card border-primary">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">When</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int p = int.Parse(auth.spotid);
                        Spotify sp = spotterdbContext.dbContext.Spotifies.First(x => x.SpotId == p);

                        if (sp != null)
                        {
                            int i = 0;

                            IQueryable<Listen> listens = spotterdbContext.dbContext.Listens.Where(x => x.SpotId == p);
                            Listen[] _listens = listens.ToArray();
                            Track[] _tracks = listens.Select(x => x.Track).ToArray();

                            foreach (Listen listen in _listens)
                            {
                                Track t = _tracks[i]; /*(new spotterdbContext()).Tracks.First(x => x.TrackId == listen.TrackId)*/;
                                i++;

                                <tr class="table-secondary">
                                    <th scope="row">@t.Title</th>
                                    <td>@listen.ListenAt</td>
                                </tr>

                                if (t.Features != null)
                                {
                                    t.SetFeatures(sp);
                                    Features features = t._features;

                                    float total = Math.Abs(features.getTotal() / 100);

                                    <tr>
                                        <th scope="row" colspan="2">
                                            <div class="progress">
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.acousticness/total))%; background-color: deepskyblue;"></div>
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.danceability/total))%; background-color: firebrick;"></div>
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.energy/total))%; background-color: cadetblue;"></div>
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.speechiness/total))%; background-color: forestgreen;"></div>
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.instrumentalness/total))%; background-color: hotpink;"></div>
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.liveness/total))%; background-color: mediumpurple;"></div>
                                                <div class="progress-bar" role="progressbar" style="width: @(Math.Abs(features.valence/total))%; background-color: goldenrod;"></div>
                                            </div>
                                        </th>
                                    </tr>
                                }
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    }
}